import { defineComponent } from 'vue'->Como é um projeto typescript preciso fazer o import da tipagem

--->PROPRIEDADE DATA
export default defineComponent({
  data(){
    return{
      //posso retornar qualquer coisa (Objetos, strings, arrays...)
    }
  }
})
//aqui é onde eu retorno dados que posso acessar no html através da interpolação {{}}

--->PROPRIEDADE COMPUTED
serve para retornar um dado com alguma alteração ou manipulção aplicada
ex: um dado que veio do meu back e está no data (posso fazer uma verificação, aplicar alguma lógica...), ao invés de mostrar diretamente no html é melhor fazer alguma manipulação assim eu posso usar em outro componentes sem ter que estar mostarndo diretamento o dado
export default defineComponent({
  data() {
    return {
      name: 'Renan',
      sobrenome: 'Oliveira'
    }
  },
  computed: {
    fullName(): string {
      return `${this.name} ${this.sobrenome}`
    }
  }
})
aqui ao invés de mostrar o nome completo no HTML fazendo a interpolação, eu posso criar uma função que concatena os nome e no HTML eu só faço a chamada da função monstrando o nome completo.

--->METHODS
Em meu HTML posso ter um dado e nele eu quero atribuir um função ou algo do tipo, posso criar um propriedade METHODS e nela passar um objeto de funções ou apenas uma função. Ex:
No meu HTML tenho um dado numérico e quero fazer alguma lógica, no caso eu quero incrementar quando apertar o botão, diminuir quando apertar outro botão e resetar em outro botão. Basta criar ele e nas propriedades do button no HTML chamar @click="methods"....
methods: {
    incrementar() {
      this.count++
    },
    diminuir() {
      this.count--
    },
    resetar() {
      this.count = 0
    }
  }

  --->WATCH 
  Serve para caso eu queria ver a manipulação de um dado.
  ex: Eu quero observar quando o valor de um dado que está sendo mudado no meu HTML. para isso eu coloco watch e abro um objeto
  e nele coloco uma função com o MESMO nome do dado que quero observar.
  nele eu posso receber dois parametros (dado antigo e dado novo) e dentro da função posso fazer a lógicaque eu quiser.

 <h1>{{ count }}</h1>
  <button @click="count++">Incrementar</button>

   watch: {
    count(newValue, oldValue) {
      console.log(oldValue)
      console.log(newValue)
    }
  }

  --->Exercício
[] Definir o dado `todos`
[] Preencher os `todos` quando o componente é criado
[] Exibir em tela apenas `todos` concluídos
[] Ter um método para concluir os `todos`
[] Mostrar um alerta quando todos os `todos` forem finalizados

SOLUÇÃO
<template>
  <p v-for="todo in doneTodos" :key="todo.text">
    {{ todo.text }}
  </p>
  <button @click="checkAllTodos">Finalizar</button>
</template>

<script lang="ts">
import { defineComponent } from 'vue'

interface Todo {
  text: string
  done: boolean
}

export default defineComponent({
  data() {
    return {
      todos: [] as Todo[]
    }
  },
  watch: {
    todos(newValue: Todo[]) {
      const isFinished = !newValue.some(({ done }) => !done)
      if (isFinished) {
        alert('Ebaaaa')
      }
    }
  },
  created() {
    this.todos = [
      { text: 'Estudar Typescript', done: true },
      { text: 'Lavar os pratos', done: false },
      { text: 'Aprender Nuxt.js', done: true }
    ]
  },
  computed: {
    doneTodos(): Todo[] {
      return this.todos.filter((todo) => todo.done)
    }
  },
  methods: {
    checkAllTodos() {
      this.todos = this.todos.map(({ text }) => {
        return { text, done: true }
      })
    }
  }
})
</script>

-----------------------------CICLOS DE VIDA---------------------------------------
--->BEFORECREATE

Ele é executado antes de meu app ser criado e portanto não tem acesso a dados ou outros elementos da minha aplicação
export default defineComponent({
  data() {
    return {
      message: 'Hello cataline'
    }
  },
  beforeCreate() {
    console.log('this.message')<--- ele não aparecerá a mensagem pois não tema acesso
  }

--->CREATE
executado no momento da aplicação e portanto tem acesso a dados e elementos da minha aplicação
created() {
    console.log('criado')
  }
                        ******EXEMPLOS DE USO*****
EX: Se eu tivesse um dado e quisesse que ele fosse carregado o mais cedo possivél, não adiantaria usar o beforeCreate pq ele não consegue acessar os dados da minha aplicação como no exemplo abaixo:

export default defineComponent({
  data() {
    return {
      message: 'Hello cataline',
      posts: []
    }
  },
  beforeCreate() {
    this.posts= ['hello', 'exemplo', 'exemplo 2']<--isso não funcionaria, como explicado, ele não tem acesso a dados
  },
  created() {
    this.posts= ['hello', 'exemplo', 'exemplo 2']<--maneira certa, pois os dados serão carregados no momento que for criada
  }
})
</script>

Usarei o beforeCreate quando eu quiser executar algo o mais cedo possivél mas ele não tenha contato com aplicação

--->BEFOREMOUNT
Ele tem acesso ao dados mas só depois de montados(depois que tudo é carregado)

--->MOUNT tem acesso a todos os dados da DOM e aos dados da app

                         ******EXEMPLOS DE USO*****
Se eu quiser fazer uma manipulação na DOM o mais cedo possivél o ideal é que seja no created pois o beforeMount não tem acesso a nada da dom ainda como exemplo abaixo:
 export default defineComponent({
  data() {
    return {
      message: 'Hello cataline',
      posts: []
    }
  },
  beforeMount() {
    this.$el.style.background = 'red' <--nesse caso ele não funciona e minha aplicação  para
  },
  mounted() {
    this.$el.style.background = 'red'<--forma correta de manipular a dom
  }
})
</script>
Mas lembrando, eles tem acesso aos dados mas o beforeMount só não tem acesso a DOM

--->BEFOREUPDATE
Ele não é ativado quando atualizo a pagina mas sim quando há uma atualização de algum dado em meu componente, então ele só será chamado quanddo houver mudanças de dados
--->UPDATE
Segue a mesma linha de raciocionio do BEFOREUPDATE

                         ******EXEMPLOS DE USO*****
Digamos que o usuário está usando minha magina e ele atualiza o dado de contagem, dentro do update posso passar um lógica, como no exemplo abaixo:

<template>
  <h1>{{ count }}</h1>
  <button @click="count++">Incrementar</button>
</template>

<script lang="ts">
import { defineComponent } from 'vue'

export default defineComponent({
  data() {
    return {
      count: 0
    }
  },
  beforeUpdate() {
    alert('Você irá atualizar!')
  },
  updated() {
    if (this.count === 5) {
      this.count = 6
    }
  }
})
</script>

quando atualizar o dado o meu update se encarregara de não deixar o 5 aparecer. E antes que atualize ele executa uma ação que eu quero (no caso um alert).

--->BEFOREUNMOUNT
Executado antes de desmontar minha aplicação, por exemplo o usuario fez alguma manipulação de um dado e fecha a paginha, podemos guardar essa informação no banco e dados ou coisas do tipo.  

--->UNMOUNT
executa depois da minha DOM ser desmontada, não tenho acesso mais aos dados.

                        ******EXEMPLOS DE USO*****

       <template>
  <h1>{{ count }}</h1>
  <button @click="count++">Incrementar</button>
  <button @click="destroyComponent">Desmontar</button>
</template>

<script lang="ts">
import { defineComponent } from 'vue'

export default defineComponent({
  data() {
    return {
      count: 0
    }
  },
  beforeUnmount() {
    console.log('Salvando a contagem no db')
  },
  unmounted() {
    alert('Obrigado por utilizar o contador')
  },
  methods: {
    destroyComponent() {
      this.$.appContext.app.unmount(this.$el)
    }
  }
})
</script> 

antes de minha aplicação ser desmontada, ele irá salvar as alteraçoes no bd e depois de desmontada ele exibe uma mensagem de agradeciemnto simulando alguma ação que posso usar.


**************************DIRETIVAS************************************

--->V-BIND
Serve para fazer associação de dados para o template, só que para dentro de atributos HTML, como se eu tivesse pegando um id do usuario e passando para o um atributo do html. Basicamente é, se eu quiser usar uma variavél em um atrbuto do HTML tenho que usar o v-bind Ex:
*atalho do v-bind-> :class ao invés de v-bind:class
<template>
  <a v-bind:href="product.url" v-bind:class="changesBackgroundColor">{{
    product.name
  }}</a>
</template>

<script lang="ts">
import { defineComponent } from 'vue'

export default defineComponent({
  data() {
    return {
      product: {
        name: 'Sabonete',
        url: 'http://google.com',
        stock: false
      }
    }
  },
  computed: {
    changesBackgroundColor():string {
      if (this.product.stock) {
        return 'verde'
      } else {
        return 'vermelho'
      }
    }
  }
})
</script>

<style scoped>
.vermelho {
  color: red;
}
.verde {
  color: green;
}
</style>
Nesse exemplo estou fazendo a associação do dado de url para dentro do atributo href e pegando o dado stock e passando para dentro do atributo class através de um computed.

--->V-TEXT 
Serve como uma interpolação, mas diferente dela, eu não posso misturar com outras coisa, tipo um texto ou um outro dado exemplo abaixo:

<template>
  <h1>{{ name }} programador </h1> <--aqui posso na tag escrever,passar dados...
  <p v-text="name"></p> <--aqui só posso usar a variavel no v-text e pronto
</template>

<script lang="ts">
import { defineComponent } from 'vue'

export default defineComponent({
  data() {
    return {
      name: 'renan'
    }
  }
})
</script>

--->V-HTML
Funciona no mesmo estilo do v-text, só pode ser usada ela em um tag sem possibilidade de escrever ou passar dados no corpo da tag.
Serve para quando eu guardo textos formatados no banco de dados, ele me retona estranha para ser mostrado ao usuario, então usamos o v-html
para tirar essa formatação estranha exemplo abaixo:

<template>
  <p>Acesse: <span v-html="url"></span></p>
</template>

<script lang="ts">
import { defineComponent } from 'vue'

export default defineComponent({
  data() {
    return {
      url: '<a href="https://github.com/Renan1fps">Meu github</a>'
    }
  }
})
</script>

*DICA: somente voce possa usar essa tag, pois o usuario mal intencionado pode passar um código e danificar o sistema.
ex: um blog que um pessoa escreve ser artigo e ele é salvo no banco de dados, ele será formatado para html e essa pessoa pode passar um script.

--->V-ON 
Serve para eventos, uso o v-on depois : <-- depois dele falo o evento que vai ser escutado (clicks....) alem disso depois do evento posso passar modificadores como no exemplo v-on:click.shift="" e dentro das aspas passo um metodo que vai acontecer quando esse evento disparar. exemplo abaixo:

<template>
  <button class="success">
    <h5 v-on:click="something">Click aqui para disparar um evento!</h5>
  </button>
</template>

<script lang="ts">
import { defineComponent } from 'vue'

export default defineComponent({
  data() {
    return {}
  },
  methods: {
    something() {
      alert('Disparou um evento!')
    }
  }
})
</script>
<style scoped>
.success {
  background-color: darkgreen;
}
</style>
CASO ESPECIAL: Caso eu queira previnir o comportamento padrao como ao clicar em um link basta fazer como exemplo abaixo:
<a v-on:click.prevent="something" href="https://github.com/Renan1fps">Click</a>

---> V-IF e V-else
vai fazer a lógica que eu passaer se atender as condiçoes, e sempre tem que estar em tags juntas(uma abaixo da outra) como no exemplo:

<template>
  <h1 v-if="sexo === 'masculino'">Masculino</h1>
  <h1 v-else>feminino</h1>
</template>

<script lang="ts">
import { defineComponent } from 'vue'

export default defineComponent({
  data() {
    return {
      sexo: 'Feminino'
    }
  }
})
</script>

se meu sexo no data retornar masculino ele renderiza em tela o masculino, caso contraio ele renderiza o feminino (podemos ter também o v-else-if)
*v-if="sexo === 'masculino'"  <--o masculino tem que estar entre aspas simples para não dar conflito com as aspas duplas do v-if=.

--->V-FOR
Serve para fazer loops em listas, caso eu queria mostrar no meu HTML um dado que me retorna um array... ex:
<template>
  <ul>
    <li v-for="product in products" :key="product.id">
      {{ product.nome }}
    </li>
  </ul>
</template>

<script lang="ts">
import { defineComponent } from 'vue'

export default defineComponent({
  data() {
    return {
      products: [
        { id: 1, nome: 'feijão' },
        { id: 2, nome: 'arroz' },
        { id: 3, nome: 'batata' },
        { id: 4, nome: 'carne' }
      ]
    }
  }
})
</script>
Meu products está me retornando uma lista de produtos  então eu faço o v-for=""
e coloco um nome in products (esse segundo nome sempre tem que ser o que veio do meu data, se fosse materias, teria que ser "nome" in materias... "nome" in frutas...) e passo uma chave que serve como identidicador para não causar bugs no código (deve ser algo único).
