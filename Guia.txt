import { defineComponent } from 'vue'->Como é um projeto typescript preciso fazer o import da tipagem

--->PROPRIEDADE DATA
export default defineComponent({
  data(){
    return{
      //posso retornar qualquer coisa (Objetos, strings, arrays...)
    }
  }
})
//aqui é onde eu retorno dados que posso acessar no html através da interpolação {{}}

--->PROPRIEDADE COMPUTED
serve para retornar um dado com alguma alteração ou manipulção aplicada
ex: um dado que veio do meu back e está no data (posso fazer uma verificação, aplicar alguma lógica...), ao invés de mostrar diretamente no html é melhor fazer alguma manipulação assim eu posso usar em outro componentes sem ter que estar mostarndo diretamento o dado
export default defineComponent({
  data() {
    return {
      name: 'Renan',
      sobrenome: 'Oliveira'
    }
  },
  computed: {
    fullName(): string {
      return `${this.name} ${this.sobrenome}`
    }
  }
})
aqui ao invés de mostrar o nome completo no HTML fazendo a interpolação, eu posso criar uma função que concatena os nome e no HTML eu só faço a chamada da função monstrando o nome completo.

--->METHODS
Em meu HTML posso ter um dado e nele eu quero atribuir um função ou algo do tipo, posso criar um propriedade METHODS e nela passar um objeto de funções ou apenas uma função. Ex:
No meu HTML tenho um dado numérico e quero fazer alguma lógica, no caso eu quero incrementar quando apertar o botão, diminuir quando apertar outro botão e resetar em outro botão. Basta criar ele e nas propriedades do button no HTML chamar @click="methods"....
methods: {
    incrementar() {
      this.count++
    },
    diminuir() {
      this.count--
    },
    resetar() {
      this.count = 0
    }
  }

  --->WATCH 
  Serve para caso eu queria ver a manipulação de um dado.
  ex: Eu quero observar quando o valor de um dado que está sendo mudado no meu HTML. para isso eu coloco watch e abro um objeto
  e nele coloco uma função com o MESMO nome do dado que quero observar.
  nele eu posso receber dois parametros (dado antigo e dado novo) e dentro da função posso fazer a lógicaque eu quiser.

 <h1>{{ count }}</h1>
  <button @click="count++">Incrementar</button>

   watch: {
    count(newValue, oldValue) {
      console.log(oldValue)
      console.log(newValue)
    }
  }

  --->Exercício
[] Definir o dado `todos`
[] Preencher os `todos` quando o componente é criado
[] Exibir em tela apenas `todos` concluídos
[] Ter um método para concluir os `todos`
[] Mostrar um alerta quando todos os `todos` forem finalizados

SOLUÇÃO
<template>
  <p v-for="todo in doneTodos" :key="todo.text">
    {{ todo.text }}
  </p>
  <button @click="checkAllTodos">Finalizar</button>
</template>

<script lang="ts">
import { defineComponent } from 'vue'

interface Todo {
  text: string
  done: boolean
}

export default defineComponent({
  data() {
    return {
      todos: [] as Todo[]
    }
  },
  watch: {
    todos(newValue: Todo[]) {
      const isFinished = !newValue.some(({ done }) => !done)
      if (isFinished) {
        alert('Ebaaaa')
      }
    }
  },
  created() {
    this.todos = [
      { text: 'Estudar Typescript', done: true },
      { text: 'Lavar os pratos', done: false },
      { text: 'Aprender Nuxt.js', done: true }
    ]
  },
  computed: {
    doneTodos(): Todo[] {
      return this.todos.filter((todo) => todo.done)
    }
  },
  methods: {
    checkAllTodos() {
      this.todos = this.todos.map(({ text }) => {
        return { text, done: true }
      })
    }
  }
})
</script>
